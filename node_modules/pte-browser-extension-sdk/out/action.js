"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForAction = exports.sendAction = void 0;
const sendAction = ({ type, payload }) => {
    const event = new CustomEvent("radix#chromeExtension#send", {
        detail: { type, payload },
    });
    window.dispatchEvent(event);
};
exports.sendAction = sendAction;
const waitForAction = (successType, errorTypes) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        window.addEventListener("radix#chromeExtension#receive", (event) => {
            const { action } = event
                .detail;
            if (action.type === successType)
                resolve(action);
            else if (errorTypes === null || errorTypes === void 0 ? void 0 : errorTypes.includes(action.type))
                reject(action);
        }, {
            once: true,
        });
    });
});
exports.waitForAction = waitForAction;
//# sourceMappingURL=action.js.map