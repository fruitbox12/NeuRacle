import { Receipt } from 'pte-sdk';
/**
 * Represents the type of an action.
 */
export declare enum ActionType {
    GetAccountAddress = "getAccountAddress",
    GetAccountAddressSuccess = "getAccountAddressSuccess",
    GetAccountAddressFailure = "getAccountAddressFailure",
    SignTransaction = "signTransaction",
    SignTransactionSuccess = "signTransactionSuccess",
    SignTransactionFailure = "signTransactionFailure"
}
/**
 * Represents an action.
 */
export declare type Action<T extends ActionType, P> = {
    type: T;
    payload: P;
    id: string;
};
export declare type GetAccountAddress = Action<ActionType.GetAccountAddress, string>;
export declare type GetAccountAddressSuccess = Action<ActionType.GetAccountAddressSuccess, string>;
export declare type GetAccountAddressFailure = Action<ActionType.GetAccountAddressFailure, string>;
export declare type SignTransaction = Action<ActionType.SignTransaction, string>;
export declare type SignTransactionSuccess = Action<ActionType.SignTransactionSuccess, Receipt>;
export declare type SignTransactionFailure = Action<ActionType.SignTransactionFailure, string>;
export declare type ActionTypes = GetAccountAddress | GetAccountAddressSuccess | GetAccountAddressFailure | SignTransaction | SignTransactionSuccess | SignTransactionFailure;
export declare enum MessageTarget {
    Extension = 0,
    Dapp = 1
}
export declare type Message<Action = ActionTypes> = {
    action: Action;
    target: MessageTarget;
};
export declare type MessageSenderData = {
    tabId: number;
    url: string;
    createdAt: number;
};
export declare type MessageStoreItem<Action = ActionTypes> = Message<Action> & MessageSenderData;
//# sourceMappingURL=_types.d.ts.map