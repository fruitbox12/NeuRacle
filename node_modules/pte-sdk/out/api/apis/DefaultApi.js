"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Babylon PTE API
 * Babylon Public Test Environment (PTE) API specification.
 *
 * The version of the OpenAPI document: 0.1.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class DefaultApi extends runtime.BaseAPI {
    /**
     * Get info about a component
     */
    getComponentRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.address === null || requestParameters.address === undefined) {
                throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getComponent.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/component/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ComponentFromJSON)(jsonValue));
        });
    }
    /**
     * Get info about a component
     */
    getComponent(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getComponentRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the current epoch
     */
    getEpochRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/epoch`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.EpochFromJSON)(jsonValue));
        });
    }
    /**
     * Get the current epoch
     */
    getEpoch(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEpochRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get info about a specific non-fungible unit
     */
    getNonFungibleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.address === null || requestParameters.address === undefined) {
                throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getNonFungible.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/non-fungible/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NonFungibleFromJSON)(jsonValue));
        });
    }
    /**
     * Get info about a specific non-fungible unit
     */
    getNonFungible(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNonFungibleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the nonce of a signer set
     */
    getNonceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.signers === null || requestParameters.signers === undefined) {
                throw new runtime.RequiredError('signers', 'Required parameter requestParameters.signers was null or undefined when calling getNonce.');
            }
            const queryParameters = {};
            if (requestParameters.signers) {
                queryParameters['signers'] = requestParameters.signers;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/nonce`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NonceFromJSON)(jsonValue));
        });
    }
    /**
     * Get the nonce of a signer set
     */
    getNonce(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNonceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a receipt
     */
    getReceiptRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getReceipt.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/receipt/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReceiptFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a receipt
     */
    getReceipt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getReceiptRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get info about a resource
     */
    getResourceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.address === null || requestParameters.address === undefined) {
                throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getResource.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/resource/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters.address))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Get info about a resource
     */
    getResource(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getResourceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a transaction
     */
    getTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/transaction/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TransactionFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a transaction
     */
    getTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all components
     */
    listComponentsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/components`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * List all components
     */
    listComponents(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listComponentsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all packages
     */
    listPackagesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/packages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * List all packages
     */
    listPackages(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listPackagesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all resources
     */
    listResourcesRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/resources`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * List all resources
     */
    listResources(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listResourcesRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Execute a signed transaction
     */
    submitTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transaction === null || requestParameters.transaction === undefined) {
                throw new runtime.RequiredError('transaction', 'Required parameter requestParameters.transaction was null or undefined when calling submitTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/transaction`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.TransactionToJSON)(requestParameters.transaction),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReceiptFromJSON)(jsonValue));
        });
    }
    /**
     * Execute a signed transaction
     */
    submitTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.submitTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=DefaultApi.js.map