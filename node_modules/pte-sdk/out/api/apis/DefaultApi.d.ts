/**
 * Babylon PTE API
 * Babylon Public Test Environment (PTE) API specification.
 *
 * The version of the OpenAPI document: 0.1.21
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Component, Epoch, NonFungible, Nonce, Receipt, Resource, Transaction } from '../models';
export interface GetComponentRequest {
    address: string;
}
export interface GetNonFungibleRequest {
    address: string;
}
export interface GetNonceRequest {
    signers: Array<string>;
}
export interface GetReceiptRequest {
    hash: string;
}
export interface GetResourceRequest {
    address: string;
}
export interface GetTransactionRequest {
    hash: string;
}
export interface SubmitTransactionRequest {
    transaction: Transaction;
}
/**
 *
 */
export declare class DefaultApi extends runtime.BaseAPI {
    /**
     * Get info about a component
     */
    getComponentRaw(requestParameters: GetComponentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Component>>;
    /**
     * Get info about a component
     */
    getComponent(requestParameters: GetComponentRequest, initOverrides?: RequestInit): Promise<Component>;
    /**
     * Get the current epoch
     */
    getEpochRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Epoch>>;
    /**
     * Get the current epoch
     */
    getEpoch(initOverrides?: RequestInit): Promise<Epoch>;
    /**
     * Get info about a specific non-fungible unit
     */
    getNonFungibleRaw(requestParameters: GetNonFungibleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NonFungible>>;
    /**
     * Get info about a specific non-fungible unit
     */
    getNonFungible(requestParameters: GetNonFungibleRequest, initOverrides?: RequestInit): Promise<NonFungible>;
    /**
     * Get the nonce of a signer set
     */
    getNonceRaw(requestParameters: GetNonceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Nonce>>;
    /**
     * Get the nonce of a signer set
     */
    getNonce(requestParameters: GetNonceRequest, initOverrides?: RequestInit): Promise<Nonce>;
    /**
     * Retrieve a receipt
     */
    getReceiptRaw(requestParameters: GetReceiptRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Receipt>>;
    /**
     * Retrieve a receipt
     */
    getReceipt(requestParameters: GetReceiptRequest, initOverrides?: RequestInit): Promise<Receipt>;
    /**
     * Get info about a resource
     */
    getResourceRaw(requestParameters: GetResourceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Resource>>;
    /**
     * Get info about a resource
     */
    getResource(requestParameters: GetResourceRequest, initOverrides?: RequestInit): Promise<Resource>;
    /**
     * Retrieve a transaction
     */
    getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Transaction>>;
    /**
     * Retrieve a transaction
     */
    getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit): Promise<Transaction>;
    /**
     * List all components
     */
    listComponentsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * List all components
     */
    listComponents(initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * List all packages
     */
    listPackagesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * List all packages
     */
    listPackages(initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * List all resources
     */
    listResourcesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>>;
    /**
     * List all resources
     */
    listResources(initOverrides?: RequestInit): Promise<Array<string>>;
    /**
     * Execute a signed transaction
     */
    submitTransactionRaw(requestParameters: SubmitTransactionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Receipt>>;
    /**
     * Execute a signed transaction
     */
    submitTransaction(requestParameters: SubmitTransactionRequest, initOverrides?: RequestInit): Promise<Receipt>;
}
//# sourceMappingURL=DefaultApi.d.ts.map